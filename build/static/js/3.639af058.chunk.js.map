{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","isValid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","isFormValid","orderHandler","event","preventDefault","formData","inputType","order","ingredient","price","orderData","userId","onOrderBurger","history","token","checkValidity","rules","length","isEmail","test","isNumeric","inputChangedHandler","updatedForm","updatedEl","target","key","setState","formArray","this","push","id","config","form","onSubmit","map","formEl","Input","invalid","shouldValidate","typed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","tokenId","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","summary","to","path","match","url","component","input","inputElement","inputClass","InputElement","Invalid","join","onChange","option","validationError","Label","label","module","exports"],"mappings":"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","file":"static/js/3.639af058.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './CheckoutSummary.module.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n            <div className={classes.CheckoutSummary}>\r\n                <h1>Here's your tasty burger!</h1>\r\n                <div style={{width: \"100%\", margin: \"auto\"}}>\r\n                    <Burger ingredients={props.ingredients} />\r\n                </div>\r\n                <Button \r\n                    btnType=\"Danger\"\r\n                    clicked={props.checkoutCancelled}>Cancel</Button> \r\n                <Button \r\n                    btnType=\"Success\"\r\n                    clicked={props.checkoutContinued}>Continue</Button>\r\n            </div>  \r\n    );\r\n}\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                validation: {},\r\n                isValid: true,\r\n                value: 'Fastest'\r\n            }\r\n        },\r\n        isFormValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n        const formData = {}\r\n        for (let inputType in this.state.orderForm) {\r\n            formData[inputType] = this.state.orderForm[inputType].value;\r\n        }\r\n        const order = {\r\n            ingredient: this.props.ingredients,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order, this.props.history, this.props.token);\r\n    }\r\n\r\n    checkValidity = (inputType) => {\r\n        let isValid = true;\r\n        let rules = inputType.validation;\r\n        if (!rules)\r\n            return true;\r\n        if (rules.required) {\r\n            isValid = isValid && (inputType.value !== '');\r\n        }\r\n        if (rules.minLength) {\r\n            isValid = isValid && (inputType.value.length >= rules.minLength);\r\n        }\r\n        if (rules.maxLength) {\r\n            isValid = isValid && (inputType.value.length <= rules.maxLength);\r\n        }\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(inputType.value) && isValid\r\n        }\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(inputType.value) && isValid\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputType) => {\r\n        //Deep cloning: Changing state immutably \r\n        const updatedForm = {\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedEl = {\r\n            ...updatedForm[inputType]\r\n        };\r\n        updatedEl[\"value\"] = event.target.value;\r\n        updatedEl.isValid = this.checkValidity(updatedEl);\r\n        updatedEl.touched = true;\r\n        updatedForm[inputType] = updatedEl;\r\n        let isFormValid = true;\r\n        for (let key in updatedForm) {\r\n            isFormValid = isFormValid && updatedForm[key].isValid;\r\n        }\r\n        this.setState({ orderForm: updatedForm, isFormValid: isFormValid });\r\n    }\r\n\r\n    render() {\r\n        const formArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n\r\n        let form = (\r\n            <div>\r\n                <h4>Enter your Contact Details</h4>\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formArray.map(formEl => {\r\n                        return <Input\r\n                            key={formEl.id}\r\n                            elementType={formEl.config.elementType}\r\n                            elementConfig={formEl.config.elementConfig}\r\n                            value={formEl.config.value}\r\n                            invalid={!formEl.config.isValid}\r\n                            shouldValidate={formEl.config.validation}\r\n                            touched={formEl.config.touched}\r\n                            typed={(event) => this.inputChangedHandler(event, formEl.id)} />\r\n                    })}\r\n                    <Button btnType=\"Success\" disabled={!this.state.isFormValid} >Order Now!</Button>\r\n                </form>\r\n            </div>\r\n        );\r\n        if(this.props.loading)\r\n            form = <Spinner />;\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.tokenId,\r\n        userId: state.auth.userId\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, history, token) => dispatch(actions.purchaseBurger(orderData, history, token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData,axios));","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.push(\"/checkout/contact-data\");\r\n    }\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ingredients) {\r\n            summary = (\r\n                <div>\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ingredients}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route path={this.props.match.url + \"/contact-data\"}\r\n                        component={ContactData} />\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                {summary}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        ingredients: state.burgerBuilder.ingredients\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    let inputClass = [classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched)\r\n        inputClass.push(classes.Invalid)\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select \r\n                className={inputClass.join(' ')}\r\n                value={props.value}\r\n                onChange={props.typed}>\r\n                {props.elementConfig.options.map(option => {\r\n                    return <option key={option.value} \r\n                                value={option.value}> \r\n                            {option.displayValue}</option>\r\n                })}\r\n            </select>\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />\r\n    }\r\n\r\n    let validationError = null;\r\n    if(props.touched && props.invalid) {\r\n        validationError = <p>Please enter valid data</p>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {validationError}\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Yd4b\",\"Label\":\"Input_Label__1zWM1\",\"InputElement\":\"Input_InputElement__1hqFP\",\"Invalid\":\"Input_Invalid__9Wtkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__3OW66\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3b7l0\",\"Input\":\"ContactData_Input__3_ICl\"};"],"sourceRoot":""}