{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClass","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","typed","options","map","option","key","displayValue","validationError","Input","Label","label","module","exports","Auth","state","authForm","email","type","placeholder","validation","required","isEmail","isValid","password","minLength","isSignUp","checkValidity","inputType","rules","length","maxLength","test","isNumeric","inputChangedHandler","event","updatedForm","updatedElement","target","setState","submitHandler","preventDefault","onAuth","authModeHandler","prevState","console","log","this","authRedirectPath","building","onAuthRedirectPath","formArray","id","config","form","formEl","errorMessage","error","authData","loading","onSubmit","btnType","clicked","authRedirect","isAuth","to","Component","connect","auth","tokenId","burgerBuilder","dispatch","actions"],"mappings":"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","file":"static/js/4.6e9d2ae0.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    let inputClass = [classes.InputElement];\r\n    if(props.invalid && props.shouldValidate && props.touched)\r\n        inputClass.push(classes.Invalid)\r\n\r\n    switch(props.elementType){\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = <select \r\n                className={inputClass.join(' ')}\r\n                value={props.value}\r\n                onChange={props.typed}>\r\n                {props.elementConfig.options.map(option => {\r\n                    return <option key={option.value} \r\n                                value={option.value}> \r\n                            {option.displayValue}</option>\r\n                })}\r\n            </select>\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClass.join(' ')} \r\n                {...props.elementConfig} \r\n                value={props.value}\r\n                onChange={props.typed} />\r\n    }\r\n\r\n    let validationError = null;\r\n    if(props.touched && props.invalid) {\r\n        validationError = <p>Please enter valid data</p>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {validationError}\r\n            {inputElement}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1Yd4b\",\"Label\":\"Input_Label__1zWM1\",\"InputElement\":\"Input_InputElement__1hqFP\",\"Invalid\":\"Input_Invalid__9Wtkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__TLVVI\",\"Input\":\"Auth_Input__25Y_B\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css'\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Auth extends Component {\r\n    componentDidMount() {\r\n        console.log(this.props.authRedirectPath);\r\n        if (!this.props.building && this.props.authRedirectPath !== '/') {\r\n            this.props.onAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    state = {\r\n        authForm: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'E-mail address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                isValid: false,\r\n                touched: false\r\n            },\r\n        },\r\n        isSignUp: true\r\n    }\r\n\r\n    checkValidity = (inputType) => {\r\n        let isValid = true;\r\n        let rules = inputType.validation;\r\n        if (!rules)\r\n            return true;\r\n        if (rules.required) {\r\n            isValid = isValid && (inputType.value !== '');\r\n        }\r\n        if (rules.minLength) {\r\n            isValid = isValid && (inputType.value.length >= rules.minLength);\r\n        }\r\n        if (rules.maxLength) {\r\n            isValid = isValid && (inputType.value.length <= rules.maxLength);\r\n        }\r\n        if (rules.isEmail) {\r\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n            isValid = pattern.test(inputType.value) && isValid\r\n        }\r\n        if (rules.isNumeric) {\r\n            const pattern = /^\\d+$/;\r\n            isValid = pattern.test(inputType.value) && isValid\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    inputChangedHandler = (event, inputType) => {\r\n        const updatedForm = { ...this.state.authForm };\r\n        const updatedElement = {\r\n            ...updatedForm[inputType],\r\n            value: event.target.value,\r\n            isValid: this.checkValidity(updatedForm[inputType]),\r\n            touched: true\r\n        }\r\n        updatedForm[inputType] = updatedElement;\r\n        this.setState({ authForm: updatedForm })\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.authForm.email.value, this.state.authForm.password.value, this.state.isSignUp);\r\n    }\r\n\r\n    authModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return { isSignUp: !prevState.isSignUp }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const formArray = [];\r\n        for (let key in this.state.authForm) {\r\n            formArray.push({\r\n                id: key,\r\n                config: this.state.authForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n            formArray.map(formEl => {\r\n                return <Input\r\n                    key={formEl.id}\r\n                    elementType={formEl.config.elementType}\r\n                    elementConfig={formEl.config.elementConfig}\r\n                    value={formEl.config.value}\r\n                    invalid={!formEl.config.isValid}\r\n                    shouldValidate={formEl.config.validation}\r\n                    touched={formEl.config.touched}\r\n                    typed={(event) => this.inputChangedHandler(event, formEl.id)} />\r\n            })\r\n        );\r\n\r\n        let errorMessage = this.props.error;\r\n\r\n        let authData = <Spinner />\r\n        if (!this.props.loading) {\r\n            authData = (\r\n                <div>\r\n                    {errorMessage}\r\n                    <form onSubmit={this.submitHandler}>\r\n                        {form}\r\n                        <Button btnType=\"Success\" >Submit</Button>\r\n                    </form>\r\n                    <Button clicked={this.authModeHandler} btnType=\"Danger\">\r\n                        Switch to {this.state.isSignUp ? 'Login' : 'SignUp'}\r\n                    </Button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuth) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {authData}\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nconst mapStateToPros = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuth: state.auth.tokenId !== null,\r\n        authRedirectPath: state.auth.authRedirectPath,\r\n        building: state.burgerBuilder.building\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToPros, mapDispatchToProps)(Auth);"],"sourceRoot":""}